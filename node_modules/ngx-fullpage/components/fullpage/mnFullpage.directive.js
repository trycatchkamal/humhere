"use strict";
/**
 * @author Meiblorn (Vadim Fedorenko) <meiblorn@gmail.com | admin@meiblorn.com> on 12/05/16.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var mnFullpage_options_class_1 = require("./mnFullpage-options.class");
var DIRECTIVE_NAME = 'mnFullpage';
var MnFullpageDirective = (function () {
    /**
     * Default public constructor
     *
     * @param el element where directive is placed on
     */
    function MnFullpageDirective(el) {
        this._el = el;
    }
    /**
     * Static method for option name retrieving
     *
     * @param property this class property name
     * @returns {string} FullpageOption class option (property) name
     */
    MnFullpageDirective.extractName = function (property) {
        return property[MnFullpageDirective.propertyPrefix.length].toLowerCase()
            + property.substring(MnFullpageDirective.propertyPrefix.length + 1);
    };
    /**
     * Perform actions on init
     */
    MnFullpageDirective.prototype.ngOnInit = function () {
        /**
         * Initialize options object with default (empty)
         * values if it doesn't exist
         */
        if (!this.options) {
            this.options = new mnFullpage_options_class_1.MnFullpageOptions();
        }
        /**
         * Iterate over all properties of directive class
         */
        for (var _i = 0, _a = Object.keys(this); _i < _a.length; _i++) {
            var property = _a[_i];
            /**
             * If property name doesn't start with 'fullpage' prefix (it is stored in
             * FullpageDirective.propertyPrefix static property) then skip this property and
             * continue the cycle
             */
            if (!property.startsWith(MnFullpageDirective.propertyPrefix)) {
                continue;
            }
            /**
             * Extract option name from the property name
             *
             * @type {string} option name
             */
            var option = MnFullpageDirective.extractName(property);
            /**
             * If options is already defined skip it
             */
            if (this.options[option]) {
                continue;
            }
            /**
             * Set property value to the options object property
             */
            this.options[option] = this[property];
        }
        /**
         * Enable fullpage for the element
         */
        $(this._el.nativeElement).fullpage(this.options);
    };
    return MnFullpageDirective;
}());
/**
 * Prefix for directive-relative properties
 *
 * @type {string} prefix
 */
MnFullpageDirective.propertyPrefix = DIRECTIVE_NAME;
MnFullpageDirective.decorators = [
    { type: core_1.Directive, args: [{
                selector: '[' + DIRECTIVE_NAME + ']'
            },] },
];
/** @nocollapse */
MnFullpageDirective.ctorParameters = function () { return [
    { type: core_1.ElementRef, },
]; };
MnFullpageDirective.propDecorators = {
    'options': [{ type: core_1.Input, args: [DIRECTIVE_NAME,] },],
    'mnFullpageMenu': [{ type: core_1.Input },],
    'mnFullpageLockAnchors': [{ type: core_1.Input },],
    'mnFullpageAnchors': [{ type: core_1.Input },],
    'mnFullpageNavigation': [{ type: core_1.Input },],
    'mnFullpageNavigationPosition': [{ type: core_1.Input },],
    'mnFullpageNavigationTooltips': [{ type: core_1.Input },],
    'mnFullpageShowActiveTooltip': [{ type: core_1.Input },],
    'mnFullpageSlidesNavigation': [{ type: core_1.Input },],
    'mnFullpageSlidesNavPosition': [{ type: core_1.Input },],
    'mnFullpageCss3': [{ type: core_1.Input },],
    'mnFullpageScrollingSpeed': [{ type: core_1.Input },],
    'mnFullpageAutoScrolling': [{ type: core_1.Input },],
    'mnFullpageFitToSection': [{ type: core_1.Input },],
    'mnFullpageFitToSectionDelay': [{ type: core_1.Input },],
    'mnFullpageScrollBar': [{ type: core_1.Input },],
    'mnFullpageEasing': [{ type: core_1.Input },],
    'mnFullpageEasingcss3': [{ type: core_1.Input },],
    'mnFullpageLoopBottom': [{ type: core_1.Input },],
    'mnFullpageLoopTop': [{ type: core_1.Input },],
    'mnFullpageLoopHorizontal': [{ type: core_1.Input },],
    'mnFullpageContinuousVertical': [{ type: core_1.Input },],
    'mnFullpageNormalScrollElements': [{ type: core_1.Input },],
    'mnFullpageScrollOverflow': [{ type: core_1.Input },],
    'mnFullpageTouchSensitivity': [{ type: core_1.Input },],
    'mnFullpageNormalScrollElementTouchThreshold': [{ type: core_1.Input },],
    'mnFullpageKeyboardScrolling': [{ type: core_1.Input },],
    'mnFullpageAnimateAnchor': [{ type: core_1.Input },],
    'mnFullpageRecordHistory': [{ type: core_1.Input },],
    'mnFullpageControlArrows': [{ type: core_1.Input },],
    'mnFullpageVerticalCentered': [{ type: core_1.Input },],
    'mnFullpageResize': [{ type: core_1.Input },],
    'mnFullpageSectionsColor': [{ type: core_1.Input },],
    'mnFullpagePaddingTop': [{ type: core_1.Input },],
    'mnFullpagePaddingBottom': [{ type: core_1.Input },],
    'mnFullpageFixedElements': [{ type: core_1.Input },],
    'mnFullpageResponsiveWidth': [{ type: core_1.Input },],
    'mnFullpageResponsiveHeight': [{ type: core_1.Input },],
    'mnFullpageSectionSelector': [{ type: core_1.Input },],
    'mnFullpageSlideSelector': [{ type: core_1.Input },],
    'mnFullpageAfterLoad': [{ type: core_1.Input },],
    'mnFullpageOnLeave': [{ type: core_1.Input },],
    'mnFullpageAfterRender': [{ type: core_1.Input },],
    'mnFullpageAfterResize': [{ type: core_1.Input },],
    'mnFullpageAfterSlideLoad': [{ type: core_1.Input },],
    'mnFullpageOnSlideLeave': [{ type: core_1.Input },],
};
exports.MnFullpageDirective = MnFullpageDirective;
//# sourceMappingURL=mnFullpage.directive.js.map